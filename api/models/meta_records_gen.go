package models

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *IndexMetaTagRecordSwap) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OrgId":
			z.OrgId, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "OrgId")
				return
			}
		case "Records":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Records")
				return
			}
			if cap(z.Records) >= int(zb0002) {
				z.Records = (z.Records)[:zb0002]
			} else {
				z.Records = make([]MetaTagRecord, zb0002)
			}
			for za0001 := range z.Records {
				err = z.Records[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Records", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *IndexMetaTagRecordSwap) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "OrgId"
	err = en.Append(0x82, 0xa5, 0x4f, 0x72, 0x67, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.OrgId)
	if err != nil {
		err = msgp.WrapError(err, "OrgId")
		return
	}
	// write "Records"
	err = en.Append(0xa7, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Records)))
	if err != nil {
		err = msgp.WrapError(err, "Records")
		return
	}
	for za0001 := range z.Records {
		err = z.Records[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Records", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *IndexMetaTagRecordSwap) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "OrgId"
	o = append(o, 0x82, 0xa5, 0x4f, 0x72, 0x67, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.OrgId)
	// string "Records"
	o = append(o, 0xa7, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Records)))
	for za0001 := range z.Records {
		o, err = z.Records[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Records", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexMetaTagRecordSwap) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OrgId":
			z.OrgId, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OrgId")
				return
			}
		case "Records":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Records")
				return
			}
			if cap(z.Records) >= int(zb0002) {
				z.Records = (z.Records)[:zb0002]
			} else {
				z.Records = make([]MetaTagRecord, zb0002)
			}
			for za0001 := range z.Records {
				bts, err = z.Records[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Records", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *IndexMetaTagRecordSwap) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint32Size + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Records {
		s += z.Records[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *IndexMetaTagRecordUpsert) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OrgId":
			z.OrgId, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "OrgId")
				return
			}
		case "MetaTags":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "MetaTags")
				return
			}
			if cap(z.MetaTags) >= int(zb0002) {
				z.MetaTags = (z.MetaTags)[:zb0002]
			} else {
				z.MetaTags = make([]string, zb0002)
			}
			for za0001 := range z.MetaTags {
				z.MetaTags[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaTags", za0001)
					return
				}
			}
		case "Expressions":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Expressions")
				return
			}
			if cap(z.Expressions) >= int(zb0003) {
				z.Expressions = (z.Expressions)[:zb0003]
			} else {
				z.Expressions = make([]string, zb0003)
			}
			for za0002 := range z.Expressions {
				z.Expressions[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Expressions", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *IndexMetaTagRecordUpsert) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "OrgId"
	err = en.Append(0x83, 0xa5, 0x4f, 0x72, 0x67, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.OrgId)
	if err != nil {
		err = msgp.WrapError(err, "OrgId")
		return
	}
	// write "MetaTags"
	err = en.Append(0xa8, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.MetaTags)))
	if err != nil {
		err = msgp.WrapError(err, "MetaTags")
		return
	}
	for za0001 := range z.MetaTags {
		err = en.WriteString(z.MetaTags[za0001])
		if err != nil {
			err = msgp.WrapError(err, "MetaTags", za0001)
			return
		}
	}
	// write "Expressions"
	err = en.Append(0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Expressions)))
	if err != nil {
		err = msgp.WrapError(err, "Expressions")
		return
	}
	for za0002 := range z.Expressions {
		err = en.WriteString(z.Expressions[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Expressions", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *IndexMetaTagRecordUpsert) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "OrgId"
	o = append(o, 0x83, 0xa5, 0x4f, 0x72, 0x67, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.OrgId)
	// string "MetaTags"
	o = append(o, 0xa8, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MetaTags)))
	for za0001 := range z.MetaTags {
		o = msgp.AppendString(o, z.MetaTags[za0001])
	}
	// string "Expressions"
	o = append(o, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Expressions)))
	for za0002 := range z.Expressions {
		o = msgp.AppendString(o, z.Expressions[za0002])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexMetaTagRecordUpsert) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OrgId":
			z.OrgId, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OrgId")
				return
			}
		case "MetaTags":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetaTags")
				return
			}
			if cap(z.MetaTags) >= int(zb0002) {
				z.MetaTags = (z.MetaTags)[:zb0002]
			} else {
				z.MetaTags = make([]string, zb0002)
			}
			for za0001 := range z.MetaTags {
				z.MetaTags[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaTags", za0001)
					return
				}
			}
		case "Expressions":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Expressions")
				return
			}
			if cap(z.Expressions) >= int(zb0003) {
				z.Expressions = (z.Expressions)[:zb0003]
			} else {
				z.Expressions = make([]string, zb0003)
			}
			for za0002 := range z.Expressions {
				z.Expressions[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Expressions", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *IndexMetaTagRecordUpsert) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint32Size + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.MetaTags {
		s += msgp.StringPrefixSize + len(z.MetaTags[za0001])
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0002 := range z.Expressions {
		s += msgp.StringPrefixSize + len(z.Expressions[za0002])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MetaTagRecord) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MetaTags":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "MetaTags")
				return
			}
			if cap(z.MetaTags) >= int(zb0002) {
				z.MetaTags = (z.MetaTags)[:zb0002]
			} else {
				z.MetaTags = make([]string, zb0002)
			}
			for za0001 := range z.MetaTags {
				z.MetaTags[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaTags", za0001)
					return
				}
			}
		case "Expressions":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Expressions")
				return
			}
			if cap(z.Expressions) >= int(zb0003) {
				z.Expressions = (z.Expressions)[:zb0003]
			} else {
				z.Expressions = make([]string, zb0003)
			}
			for za0002 := range z.Expressions {
				z.Expressions[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Expressions", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MetaTagRecord) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "MetaTags"
	err = en.Append(0x82, 0xa8, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.MetaTags)))
	if err != nil {
		err = msgp.WrapError(err, "MetaTags")
		return
	}
	for za0001 := range z.MetaTags {
		err = en.WriteString(z.MetaTags[za0001])
		if err != nil {
			err = msgp.WrapError(err, "MetaTags", za0001)
			return
		}
	}
	// write "Expressions"
	err = en.Append(0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Expressions)))
	if err != nil {
		err = msgp.WrapError(err, "Expressions")
		return
	}
	for za0002 := range z.Expressions {
		err = en.WriteString(z.Expressions[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Expressions", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MetaTagRecord) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "MetaTags"
	o = append(o, 0x82, 0xa8, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MetaTags)))
	for za0001 := range z.MetaTags {
		o = msgp.AppendString(o, z.MetaTags[za0001])
	}
	// string "Expressions"
	o = append(o, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Expressions)))
	for za0002 := range z.Expressions {
		o = msgp.AppendString(o, z.Expressions[za0002])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MetaTagRecord) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MetaTags":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetaTags")
				return
			}
			if cap(z.MetaTags) >= int(zb0002) {
				z.MetaTags = (z.MetaTags)[:zb0002]
			} else {
				z.MetaTags = make([]string, zb0002)
			}
			for za0001 := range z.MetaTags {
				z.MetaTags[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaTags", za0001)
					return
				}
			}
		case "Expressions":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Expressions")
				return
			}
			if cap(z.Expressions) >= int(zb0003) {
				z.Expressions = (z.Expressions)[:zb0003]
			} else {
				z.Expressions = make([]string, zb0003)
			}
			for za0002 := range z.Expressions {
				z.Expressions[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Expressions", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MetaTagRecord) Msgsize() (s int) {
	s = 1 + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.MetaTags {
		s += msgp.StringPrefixSize + len(z.MetaTags[za0001])
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0002 := range z.Expressions {
		s += msgp.StringPrefixSize + len(z.Expressions[za0002])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MetaTagRecordSwap) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Records":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Records")
				return
			}
			if cap(z.Records) >= int(zb0002) {
				z.Records = (z.Records)[:zb0002]
			} else {
				z.Records = make([]MetaTagRecord, zb0002)
			}
			for za0001 := range z.Records {
				err = z.Records[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Records", za0001)
					return
				}
			}
		case "Propagate":
			z.Propagate, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Propagate")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MetaTagRecordSwap) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Records"
	err = en.Append(0x82, 0xa7, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Records)))
	if err != nil {
		err = msgp.WrapError(err, "Records")
		return
	}
	for za0001 := range z.Records {
		err = z.Records[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Records", za0001)
			return
		}
	}
	// write "Propagate"
	err = en.Append(0xa9, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Propagate)
	if err != nil {
		err = msgp.WrapError(err, "Propagate")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MetaTagRecordSwap) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Records"
	o = append(o, 0x82, 0xa7, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Records)))
	for za0001 := range z.Records {
		o, err = z.Records[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Records", za0001)
			return
		}
	}
	// string "Propagate"
	o = append(o, 0xa9, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65)
	o = msgp.AppendBool(o, z.Propagate)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MetaTagRecordSwap) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Records":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Records")
				return
			}
			if cap(z.Records) >= int(zb0002) {
				z.Records = (z.Records)[:zb0002]
			} else {
				z.Records = make([]MetaTagRecord, zb0002)
			}
			for za0001 := range z.Records {
				bts, err = z.Records[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Records", za0001)
					return
				}
			}
		case "Propagate":
			z.Propagate, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Propagate")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MetaTagRecordSwap) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Records {
		s += z.Records[za0001].Msgsize()
	}
	s += 10 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MetaTagRecordSwapResult) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Deleted":
			z.Deleted, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Deleted")
				return
			}
		case "Added":
			z.Added, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Added")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MetaTagRecordSwapResult) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Deleted"
	err = en.Append(0x82, 0xa7, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Deleted)
	if err != nil {
		err = msgp.WrapError(err, "Deleted")
		return
	}
	// write "Added"
	err = en.Append(0xa5, 0x41, 0x64, 0x64, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Added)
	if err != nil {
		err = msgp.WrapError(err, "Added")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MetaTagRecordSwapResult) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Deleted"
	o = append(o, 0x82, 0xa7, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64)
	o = msgp.AppendUint32(o, z.Deleted)
	// string "Added"
	o = append(o, 0xa5, 0x41, 0x64, 0x64, 0x65, 0x64)
	o = msgp.AppendUint32(o, z.Added)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MetaTagRecordSwapResult) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Deleted":
			z.Deleted, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Deleted")
				return
			}
		case "Added":
			z.Added, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Added")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MetaTagRecordSwapResult) Msgsize() (s int) {
	s = 1 + 8 + msgp.Uint32Size + 6 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MetaTagRecordSwapResultByNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Local":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Local")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Local")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Deleted":
					z.Local.Deleted, err = dc.ReadUint32()
					if err != nil {
						err = msgp.WrapError(err, "Local", "Deleted")
						return
					}
				case "Added":
					z.Local.Added, err = dc.ReadUint32()
					if err != nil {
						err = msgp.WrapError(err, "Local", "Added")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Local")
						return
					}
				}
			}
		case "PeerResults":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "PeerResults")
				return
			}
			if z.PeerResults == nil {
				z.PeerResults = make(map[string]MetaTagRecordSwapResult, zb0003)
			} else if len(z.PeerResults) > 0 {
				for key := range z.PeerResults {
					delete(z.PeerResults, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0001 string
				var za0002 MetaTagRecordSwapResult
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "PeerResults")
					return
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "PeerResults", za0001)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "PeerResults", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Deleted":
						za0002.Deleted, err = dc.ReadUint32()
						if err != nil {
							err = msgp.WrapError(err, "PeerResults", za0001, "Deleted")
							return
						}
					case "Added":
						za0002.Added, err = dc.ReadUint32()
						if err != nil {
							err = msgp.WrapError(err, "PeerResults", za0001, "Added")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "PeerResults", za0001)
							return
						}
					}
				}
				z.PeerResults[za0001] = za0002
			}
		case "PeerErrors":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "PeerErrors")
				return
			}
			if z.PeerErrors == nil {
				z.PeerErrors = make(map[string]string, zb0005)
			} else if len(z.PeerErrors) > 0 {
				for key := range z.PeerErrors {
					delete(z.PeerErrors, key)
				}
			}
			for zb0005 > 0 {
				zb0005--
				var za0003 string
				var za0004 string
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "PeerErrors")
					return
				}
				za0004, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "PeerErrors", za0003)
					return
				}
				z.PeerErrors[za0003] = za0004
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MetaTagRecordSwapResultByNode) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Local"
	// map header, size 2
	// write "Deleted"
	err = en.Append(0x83, 0xa5, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x82, 0xa7, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Local.Deleted)
	if err != nil {
		err = msgp.WrapError(err, "Local", "Deleted")
		return
	}
	// write "Added"
	err = en.Append(0xa5, 0x41, 0x64, 0x64, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Local.Added)
	if err != nil {
		err = msgp.WrapError(err, "Local", "Added")
		return
	}
	// write "PeerResults"
	err = en.Append(0xab, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.PeerResults)))
	if err != nil {
		err = msgp.WrapError(err, "PeerResults")
		return
	}
	for za0001, za0002 := range z.PeerResults {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "PeerResults")
			return
		}
		// map header, size 2
		// write "Deleted"
		err = en.Append(0x82, 0xa7, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64)
		if err != nil {
			return
		}
		err = en.WriteUint32(za0002.Deleted)
		if err != nil {
			err = msgp.WrapError(err, "PeerResults", za0001, "Deleted")
			return
		}
		// write "Added"
		err = en.Append(0xa5, 0x41, 0x64, 0x64, 0x65, 0x64)
		if err != nil {
			return
		}
		err = en.WriteUint32(za0002.Added)
		if err != nil {
			err = msgp.WrapError(err, "PeerResults", za0001, "Added")
			return
		}
	}
	// write "PeerErrors"
	err = en.Append(0xaa, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.PeerErrors)))
	if err != nil {
		err = msgp.WrapError(err, "PeerErrors")
		return
	}
	for za0003, za0004 := range z.PeerErrors {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "PeerErrors")
			return
		}
		err = en.WriteString(za0004)
		if err != nil {
			err = msgp.WrapError(err, "PeerErrors", za0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MetaTagRecordSwapResultByNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Local"
	// map header, size 2
	// string "Deleted"
	o = append(o, 0x83, 0xa5, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x82, 0xa7, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64)
	o = msgp.AppendUint32(o, z.Local.Deleted)
	// string "Added"
	o = append(o, 0xa5, 0x41, 0x64, 0x64, 0x65, 0x64)
	o = msgp.AppendUint32(o, z.Local.Added)
	// string "PeerResults"
	o = append(o, 0xab, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.PeerResults)))
	for za0001, za0002 := range z.PeerResults {
		o = msgp.AppendString(o, za0001)
		// map header, size 2
		// string "Deleted"
		o = append(o, 0x82, 0xa7, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64)
		o = msgp.AppendUint32(o, za0002.Deleted)
		// string "Added"
		o = append(o, 0xa5, 0x41, 0x64, 0x64, 0x65, 0x64)
		o = msgp.AppendUint32(o, za0002.Added)
	}
	// string "PeerErrors"
	o = append(o, 0xaa, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.PeerErrors)))
	for za0003, za0004 := range z.PeerErrors {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendString(o, za0004)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MetaTagRecordSwapResultByNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Local":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Local")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Local")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Deleted":
					z.Local.Deleted, bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Local", "Deleted")
						return
					}
				case "Added":
					z.Local.Added, bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Local", "Added")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Local")
						return
					}
				}
			}
		case "PeerResults":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PeerResults")
				return
			}
			if z.PeerResults == nil {
				z.PeerResults = make(map[string]MetaTagRecordSwapResult, zb0003)
			} else if len(z.PeerResults) > 0 {
				for key := range z.PeerResults {
					delete(z.PeerResults, key)
				}
			}
			for zb0003 > 0 {
				var za0001 string
				var za0002 MetaTagRecordSwapResult
				zb0003--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PeerResults")
					return
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PeerResults", za0001)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "PeerResults", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Deleted":
						za0002.Deleted, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "PeerResults", za0001, "Deleted")
							return
						}
					case "Added":
						za0002.Added, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "PeerResults", za0001, "Added")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "PeerResults", za0001)
							return
						}
					}
				}
				z.PeerResults[za0001] = za0002
			}
		case "PeerErrors":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PeerErrors")
				return
			}
			if z.PeerErrors == nil {
				z.PeerErrors = make(map[string]string, zb0005)
			} else if len(z.PeerErrors) > 0 {
				for key := range z.PeerErrors {
					delete(z.PeerErrors, key)
				}
			}
			for zb0005 > 0 {
				var za0003 string
				var za0004 string
				zb0005--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PeerErrors")
					return
				}
				za0004, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PeerErrors", za0003)
					return
				}
				z.PeerErrors[za0003] = za0004
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MetaTagRecordSwapResultByNode) Msgsize() (s int) {
	s = 1 + 6 + 1 + 8 + msgp.Uint32Size + 6 + msgp.Uint32Size + 12 + msgp.MapHeaderSize
	if z.PeerResults != nil {
		for za0001, za0002 := range z.PeerResults {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + 1 + 8 + msgp.Uint32Size + 6 + msgp.Uint32Size
		}
	}
	s += 11 + msgp.MapHeaderSize
	if z.PeerErrors != nil {
		for za0003, za0004 := range z.PeerErrors {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.StringPrefixSize + len(za0004)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MetaTagRecordUpsert) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MetaTags":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "MetaTags")
				return
			}
			if cap(z.MetaTags) >= int(zb0002) {
				z.MetaTags = (z.MetaTags)[:zb0002]
			} else {
				z.MetaTags = make([]string, zb0002)
			}
			for za0001 := range z.MetaTags {
				z.MetaTags[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaTags", za0001)
					return
				}
			}
		case "Expressions":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Expressions")
				return
			}
			if cap(z.Expressions) >= int(zb0003) {
				z.Expressions = (z.Expressions)[:zb0003]
			} else {
				z.Expressions = make([]string, zb0003)
			}
			for za0002 := range z.Expressions {
				z.Expressions[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Expressions", za0002)
					return
				}
			}
		case "Propagate":
			z.Propagate, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Propagate")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MetaTagRecordUpsert) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "MetaTags"
	err = en.Append(0x83, 0xa8, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.MetaTags)))
	if err != nil {
		err = msgp.WrapError(err, "MetaTags")
		return
	}
	for za0001 := range z.MetaTags {
		err = en.WriteString(z.MetaTags[za0001])
		if err != nil {
			err = msgp.WrapError(err, "MetaTags", za0001)
			return
		}
	}
	// write "Expressions"
	err = en.Append(0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Expressions)))
	if err != nil {
		err = msgp.WrapError(err, "Expressions")
		return
	}
	for za0002 := range z.Expressions {
		err = en.WriteString(z.Expressions[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Expressions", za0002)
			return
		}
	}
	// write "Propagate"
	err = en.Append(0xa9, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Propagate)
	if err != nil {
		err = msgp.WrapError(err, "Propagate")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MetaTagRecordUpsert) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "MetaTags"
	o = append(o, 0x83, 0xa8, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MetaTags)))
	for za0001 := range z.MetaTags {
		o = msgp.AppendString(o, z.MetaTags[za0001])
	}
	// string "Expressions"
	o = append(o, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Expressions)))
	for za0002 := range z.Expressions {
		o = msgp.AppendString(o, z.Expressions[za0002])
	}
	// string "Propagate"
	o = append(o, 0xa9, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65)
	o = msgp.AppendBool(o, z.Propagate)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MetaTagRecordUpsert) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MetaTags":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetaTags")
				return
			}
			if cap(z.MetaTags) >= int(zb0002) {
				z.MetaTags = (z.MetaTags)[:zb0002]
			} else {
				z.MetaTags = make([]string, zb0002)
			}
			for za0001 := range z.MetaTags {
				z.MetaTags[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaTags", za0001)
					return
				}
			}
		case "Expressions":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Expressions")
				return
			}
			if cap(z.Expressions) >= int(zb0003) {
				z.Expressions = (z.Expressions)[:zb0003]
			} else {
				z.Expressions = make([]string, zb0003)
			}
			for za0002 := range z.Expressions {
				z.Expressions[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Expressions", za0002)
					return
				}
			}
		case "Propagate":
			z.Propagate, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Propagate")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MetaTagRecordUpsert) Msgsize() (s int) {
	s = 1 + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.MetaTags {
		s += msgp.StringPrefixSize + len(z.MetaTags[za0001])
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0002 := range z.Expressions {
		s += msgp.StringPrefixSize + len(z.Expressions[za0002])
	}
	s += 10 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MetaTagRecordUpsertResult) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MetaTags":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "MetaTags")
				return
			}
			if cap(z.MetaTags) >= int(zb0002) {
				z.MetaTags = (z.MetaTags)[:zb0002]
			} else {
				z.MetaTags = make([]string, zb0002)
			}
			for za0001 := range z.MetaTags {
				z.MetaTags[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MetaTags", za0001)
					return
				}
			}
		case "Expressions":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Expressions")
				return
			}
			if cap(z.Expressions) >= int(zb0003) {
				z.Expressions = (z.Expressions)[:zb0003]
			} else {
				z.Expressions = make([]string, zb0003)
			}
			for za0002 := range z.Expressions {
				z.Expressions[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Expressions", za0002)
					return
				}
			}
		case "Created":
			z.Created, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Created")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MetaTagRecordUpsertResult) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "MetaTags"
	err = en.Append(0x83, 0xa8, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.MetaTags)))
	if err != nil {
		err = msgp.WrapError(err, "MetaTags")
		return
	}
	for za0001 := range z.MetaTags {
		err = en.WriteString(z.MetaTags[za0001])
		if err != nil {
			err = msgp.WrapError(err, "MetaTags", za0001)
			return
		}
	}
	// write "Expressions"
	err = en.Append(0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Expressions)))
	if err != nil {
		err = msgp.WrapError(err, "Expressions")
		return
	}
	for za0002 := range z.Expressions {
		err = en.WriteString(z.Expressions[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Expressions", za0002)
			return
		}
	}
	// write "Created"
	err = en.Append(0xa7, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Created)
	if err != nil {
		err = msgp.WrapError(err, "Created")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MetaTagRecordUpsertResult) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "MetaTags"
	o = append(o, 0x83, 0xa8, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MetaTags)))
	for za0001 := range z.MetaTags {
		o = msgp.AppendString(o, z.MetaTags[za0001])
	}
	// string "Expressions"
	o = append(o, 0xab, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Expressions)))
	for za0002 := range z.Expressions {
		o = msgp.AppendString(o, z.Expressions[za0002])
	}
	// string "Created"
	o = append(o, 0xa7, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	o = msgp.AppendBool(o, z.Created)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MetaTagRecordUpsertResult) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MetaTags":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetaTags")
				return
			}
			if cap(z.MetaTags) >= int(zb0002) {
				z.MetaTags = (z.MetaTags)[:zb0002]
			} else {
				z.MetaTags = make([]string, zb0002)
			}
			for za0001 := range z.MetaTags {
				z.MetaTags[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaTags", za0001)
					return
				}
			}
		case "Expressions":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Expressions")
				return
			}
			if cap(z.Expressions) >= int(zb0003) {
				z.Expressions = (z.Expressions)[:zb0003]
			} else {
				z.Expressions = make([]string, zb0003)
			}
			for za0002 := range z.Expressions {
				z.Expressions[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Expressions", za0002)
					return
				}
			}
		case "Created":
			z.Created, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Created")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MetaTagRecordUpsertResult) Msgsize() (s int) {
	s = 1 + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.MetaTags {
		s += msgp.StringPrefixSize + len(z.MetaTags[za0001])
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0002 := range z.Expressions {
		s += msgp.StringPrefixSize + len(z.Expressions[za0002])
	}
	s += 8 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MetaTagRecordUpsertResultByNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Local":
			err = z.Local.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Local")
				return
			}
		case "PeerResults":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "PeerResults")
				return
			}
			if z.PeerResults == nil {
				z.PeerResults = make(map[string]MetaTagRecordUpsertResult, zb0002)
			} else if len(z.PeerResults) > 0 {
				for key := range z.PeerResults {
					delete(z.PeerResults, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 MetaTagRecordUpsertResult
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "PeerResults")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "PeerResults", za0001)
					return
				}
				z.PeerResults[za0001] = za0002
			}
		case "PeerErrors":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "PeerErrors")
				return
			}
			if z.PeerErrors == nil {
				z.PeerErrors = make(map[string]string, zb0003)
			} else if len(z.PeerErrors) > 0 {
				for key := range z.PeerErrors {
					delete(z.PeerErrors, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0003 string
				var za0004 string
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "PeerErrors")
					return
				}
				za0004, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "PeerErrors", za0003)
					return
				}
				z.PeerErrors[za0003] = za0004
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MetaTagRecordUpsertResultByNode) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Local"
	err = en.Append(0x83, 0xa5, 0x4c, 0x6f, 0x63, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = z.Local.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Local")
		return
	}
	// write "PeerResults"
	err = en.Append(0xab, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.PeerResults)))
	if err != nil {
		err = msgp.WrapError(err, "PeerResults")
		return
	}
	for za0001, za0002 := range z.PeerResults {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "PeerResults")
			return
		}
		err = za0002.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "PeerResults", za0001)
			return
		}
	}
	// write "PeerErrors"
	err = en.Append(0xaa, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.PeerErrors)))
	if err != nil {
		err = msgp.WrapError(err, "PeerErrors")
		return
	}
	for za0003, za0004 := range z.PeerErrors {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "PeerErrors")
			return
		}
		err = en.WriteString(za0004)
		if err != nil {
			err = msgp.WrapError(err, "PeerErrors", za0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MetaTagRecordUpsertResultByNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Local"
	o = append(o, 0x83, 0xa5, 0x4c, 0x6f, 0x63, 0x61, 0x6c)
	o, err = z.Local.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Local")
		return
	}
	// string "PeerResults"
	o = append(o, 0xab, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.PeerResults)))
	for za0001, za0002 := range z.PeerResults {
		o = msgp.AppendString(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "PeerResults", za0001)
			return
		}
	}
	// string "PeerErrors"
	o = append(o, 0xaa, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.PeerErrors)))
	for za0003, za0004 := range z.PeerErrors {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendString(o, za0004)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MetaTagRecordUpsertResultByNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Local":
			bts, err = z.Local.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Local")
				return
			}
		case "PeerResults":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PeerResults")
				return
			}
			if z.PeerResults == nil {
				z.PeerResults = make(map[string]MetaTagRecordUpsertResult, zb0002)
			} else if len(z.PeerResults) > 0 {
				for key := range z.PeerResults {
					delete(z.PeerResults, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 MetaTagRecordUpsertResult
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PeerResults")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "PeerResults", za0001)
					return
				}
				z.PeerResults[za0001] = za0002
			}
		case "PeerErrors":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PeerErrors")
				return
			}
			if z.PeerErrors == nil {
				z.PeerErrors = make(map[string]string, zb0003)
			} else if len(z.PeerErrors) > 0 {
				for key := range z.PeerErrors {
					delete(z.PeerErrors, key)
				}
			}
			for zb0003 > 0 {
				var za0003 string
				var za0004 string
				zb0003--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PeerErrors")
					return
				}
				za0004, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PeerErrors", za0003)
					return
				}
				z.PeerErrors[za0003] = za0004
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MetaTagRecordUpsertResultByNode) Msgsize() (s int) {
	s = 1 + 6 + z.Local.Msgsize() + 12 + msgp.MapHeaderSize
	if z.PeerResults != nil {
		for za0001, za0002 := range z.PeerResults {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	s += 11 + msgp.MapHeaderSize
	if z.PeerErrors != nil {
		for za0003, za0004 := range z.PeerErrors {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.StringPrefixSize + len(za0004)
		}
	}
	return
}
