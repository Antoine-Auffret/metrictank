# sample config for metric_tank
# the defaults here match the default behavior.

# tcp address for metrictank to bind to for its HTTP interface
listen = :6060

## clustering:
# cluster node name and value used to differentiate metrics between nodes
instance = default
# the primary node writes data to cassandra. There should only be 1 primary node per cluster of nodes
primary-node = false

## data:
# duration of chunks
chunkspan = 2h
# number of chunks to keep in memory. should be at least 1 more than what's needed to satisfy aggregation rules
numchunks = 5
# minimum wait before metrics are removed from storage
ttl = 35d

# max age for a chunk before to be considered stale and to be persisted to Cassandra
chunk-max-stale = 1h
# max age for a metric before to be considered stale and to be purged from memory
metric-max-stale = 6h
# Interval to run garbage collection job
gc-interval = 1h

# duration before secondary nodes start serving requests
warm-up-period = 1h



# settings for rollups (aggregation for archives)
# comma-separated of archive specifications.
# archive specification is of the form: aggSpan:chunkSpan:numChunks:TTL[:ready as bool. default true]
# with these aggregation rules: 5min:1h:2:3mon,1h:6h:2:1y:false
# 5 min of data, store in a chunk that lasts 1hour, keep 2 chunks in memory, keep for 3months in cassandra
# 1hr worth of data, in chunks of 6 hours, 2 chunks in mem, keep for 1 year, but this series is not ready yet for querying.
agg-settings =

## cassandra
# comma-separated list of hostnames
cassandra-addrs = cassandra-1.internal,cassandra-2.internal
cassandra-write-concurrency = 5
cassandra-write-queue-size = 10000000

	// Cassandra:
	cassandraAddrs            = flag.String("cassandra-addrs", "", "cassandra host (may be given multiple times as comma-separated list)")
	cassandraConsistency      = flag.String("cassandra-consistency", "one", "write consistency (any|one|two|three|quorum|all|local_quorum|each_quorum|local_one")
	cassandraTimeout          = flag.Int("cassandra-timeout", 1000, "cassandra timeout in milliseconds")
	cassandraReadConcurrency  = flag.Int("cassandra-read-concurrency", 20, "max number of concurrent reads to cassandra.")
	cassandraWriteConcurrency = flag.Int("cassandra-write-concurrency", 10, "max number of concurrent writes to cassandra.")
	cassandraReadQueueSize    = flag.Int("cassandra-read-queue-size", 100, "max number of outstanding reads before blocking. value doesn't matter much")
	cassandraWriteQueueSize   = flag.Int("cassandra-write-queue-size", 100000, "write queue size per cassandra worker. should be large engough to hold all at least the total number of series expected, divided by how many workers you have")

	// Elasticsearch:
	esAddr    = flag.String("elastic-addr", "localhost:9200", "elasticsearch address for metric definitions")
	indexName = flag.String("index-name", "metric", "Elasticsearch index name for storing metric index.")

	accountingPeriodStr = flag.String("accounting-period", "5min", "accounting period to track per-org usage metrics")

	// NSQ:
	topic              = flag.String("topic", "metrics", "NSQ topic for metrics")
	topicNotifyPersist = flag.String("topic-notify-persist", "metricpersist", "NSQ topic for persist messages")
	channel            = flag.String("channel", "tank", "NSQ channel for both metric topic and metric-persist topic")
	maxInFlight        = flag.Int("max-in-flight", 200, "max number of messages to allow in flight")

	concurrency      = flag.Int("concurrency", 10, "number of workers parsing messages from NSQ")
	producerOpts     = flag.String("producer-opt", "", "option to passthrough to nsq.Producer (may be given multiple times as comma-separated list, see http://godoc.org/github.com/nsqio/go-nsq#Config)")
	consumerOpts     = flag.String("consumer-opt", "", "option to passthrough to nsq.Consumer (may be given multiple times as comma-separated list, http://godoc.org/github.com/nsqio/go-nsq#Config)")
	nsqdTCPAddrs     = flag.String("nsqd-tcp-address", "", "nsqd TCP address (may be given multiple times as comma-separated list)")
	lookupdHTTPAddrs = flag.String("lookupd-http-address", "", "lookupd HTTP address (may be given multiple times as comma-separated list)")

	// Kafka:
	kafkaMdamBroker = flag.String("kafka-mdam-broker", "", "tcp address for kafka, for MetricDataArray messages, msgp encoded")

	// Profiling, instrumentation and logging:
	blockProfileRate = flag.Int("block-profile-rate", 0, "see https://golang.org/pkg/runtime/#SetBlockProfileRate")
	memProfileRate   = flag.Int("mem-profile-rate", 512*1024, "0 to disable. 1 for max precision (expensive!) see https://golang.org/pkg/runtime/#pkg-variables")

	statsdAddr = flag.String("statsd-addr", "localhost:8125", "statsd address")
	statsdType = flag.String("statsd-type", "standard", "statsd type: standard or datadog")

	proftrigPath       = flag.String("proftrigger-path", "/tmp", "path to store triggered profiles")
	proftrigFreqStr    = flag.String("proftrigger-freq", "60s", "inspect status frequency. set to 0 to disable")
	proftrigMinDiffStr = flag.String("proftrigger-min-diff", "1h", "minimum time between triggered profiles")
	proftrigHeapThresh = flag.Int("proftrigger-heap-thresh", 10000000, "if this many bytes allocated, trigger a profile")

	logMinDurStr = flag.String("log-min-dur", "5min", "only log incoming requests if their timerange is at least this duration. Use 0 to disable")


	inCarbon := flag.NewFlagSet("carbon-in", flag.ExitOnError)
	inCarbon.BoolVar(&Enabled, "enabled", false, "")
	inCarbon.StringVar(&addr, "addr", ":2003default", "")
	inCarbon.StringVar(&schemasFile, "schemas-file", "/path/to/your/schemas-file", "")
	
	inKafkaMdm := flag.NewFlagSet("kafka-mdm-in", flag.ExitOnError)
	inKafkaMdm.BoolVar(&Enabled, "enabled", false, "")
	inKafkaMdm.StringVar(&broker, "broker", "kafka:9092", "tcp address for kafka")
	inKafkaMdm.StringVar(&topic, "topic", "mdm", "kafka topic")
	inKafkaMdm.StringVar(&group, "group", "group1", "kafka consumer group")
	globalconf.Register("kafka-mdm-in", inKafkaMdm)


=============

channel = tank
topic = metrics

topic-notify-persist = metricpersist

# comma separated list of tcp addresses of nsqd servers
nsqd-tcp-address = nsqd1:4150,nsqd2:4150

# nsq max in flight
max-in-flight = 200
concurrency = 10


log-level = 2

statsd-addr = localhost:8125
statsd-type = standard

elastic-addr = 10.240.78.52:9200
index-name = metrictank
cassandra-timeout = 1000

proftrigger-heap-thresh = 20000000
proftrigger-freq = 1s
proftrigger-path = /var/lib/metric-tank/prof
